[gd_scene load_steps=4 format=3 uid="uid://cqwkwn4cd4bsl"]

[sub_resource type="GDScript" id="GDScript_rkl21"]
script/source = "extends CharacterBody3D

#Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")
var gravity_multiplier: float = 4.0

@onready var neck := $Neck
@onready var camera := $Neck/Camera3D
var controlSchemeWASD = true
var SPEED = 3.0
const JUMP_VELOCITY = 20
const SENSITIVITY = 0.004

#Set the new position, ALLOWS TELEPORTING FOR SPAWNING / FALLING OFF THE MAP 
func setPlayerPosition(val:Vector3): # SET PLAYER POSITION
	print(\"BEFORE Set Player Position Debugging: -\")
	print(getPlayerPosition())
	self.transform.origin = val
	print(\"Set Player Position Debugging: -\")
	print(getPlayerPosition())

#Allows for checks later in the game. 
func getPlayerPosition()->Vector3:
	 #Check if the character reference is valid
	if self:
		#Access the transform of the CharacterBody3D
		var character_transform = self.transform
		#Get the world coordinates of the CharacterBody3D
		var character_position = character_transform.origin
		#Print or use the coordinates as neede
		print(\"Character Position: \", character_position)
		return Vector3(character_position)

	else:
		print(\"Character not found.\")
		return Vector3.ZERO

func _unhandled_input(event):
	# allows to turn off input when game window is not active
	if event is InputEventMouseButton:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	elif event.is_action_pressed(\"ui_cancel\"):
		Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		
	# Handles mouse and neck rotation with clamped values so camera wont 360 on x axis.
	if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if event is InputEventMouseMotion:
			neck.rotate_y(-event.relative.x * 0.005)
			camera.rotate_x(-event.relative.y * 0.005)
			camera.rotation_degrees.x = clamp(camera.rotation_degrees.x, -60, 60)
			
			# Unused code bits, left in case. 
			#camera.translate(Vector3(0, event.relative.y * 0.01, 0))
			#if camera.position.y > camera_max_height:
				#camera.position.y = camera_max_height
			#elif camera.position.y < -camera_max_height:
				#camera.position.y = -camera_max_height
			#camera.position = Vector3(camera_start_pos.x, camera.position.y, camera_start_pos.z) 
			#camera.look_at(position)



func _physics_process(delta):
	
	# Add the gravity.
	if not is_on_floor():
		getPlayerPosition()
		velocity.y -= gravity * delta * gravity_multiplier
	# Handle jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		getPlayerPosition()
		velocity.y = JUMP_VELOCITY
		

	# Get the input direction and handle the movement/deceleration.
	var input_dir = null
	if !controlSchemeWASD:
		
		input_dir = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	else:
		
		input_dir = Input.get_vector(\"left\", \"right\", \"up\", \"down\")
	var direction = (neck.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()

# Code that was left from cleaning up, left it in case it did something other
# than controlling the character and camera.  
#var playerCharacterPosition : Vector3 : set = setPlayerPosition
#@onready var camera_start_pos: Vector3 = camera.position
#ar camera_max_height: float = 4.0

"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_d746p"]

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_fnsct"]
points = PackedVector3Array(-0.125207, -0.532801, -0.480507, 0.0227831, 0.47607, 0.498884, 0.169713, 0.559144, 0.464172, 0.231051, -0.803591, 0.320455, 0.40741, 0.651043, -0.243523, -0.482789, 0.594843, 0.0822132, -0.362868, -0.682312, 0.289697, 0.469044, -0.654529, -0.0662713, -0.127444, 0.842701, -0.338103, -0.393435, -0.683942, -0.244717, 0.438255, 0.623309, 0.200849, 0.0841477, 0.977454, 0.114795, -0.0682023, -0.976458, -0.12927, 0.20055, -0.563129, -0.451454, -0.185527, 0.595453, -0.453475, -0.273363, 0.592268, 0.407754, -0.00693649, -0.476823, 0.49966, 0.375821, -0.588614, 0.316955, 0.111579, 0.563059, -0.481177, -0.41725, 0.527866, -0.270497, -0.484546, -0.596972, -0.0665097, -0.279747, 0.908561, 0.0533361, -0.250197, -0.880712, 0.205319, 0.263647, -0.902771, -0.127394, 0.293368, 0.871526, -0.157196, 0.373412, -0.526319, -0.328246, 0.499663, 0.476641, -0.00688856, 0.0531056, 0.875001, 0.324703, -0.154543, -0.590854, 0.465879, -0.0972799, -0.782358, -0.398188, -0.387649, -0.498171, 0.31565, -0.30068, -0.587995, -0.388901)

[node name="Player Character" type="Node3D"]

[node name="CharacterBody3D" type="CharacterBody3D" parent="."]
script = SubResource("GDScript_rkl21")

[node name="Neck" type="Node3D" parent="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.3, 0)

[node name="Camera3D" type="Camera3D" parent="CharacterBody3D/Neck"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("CapsuleMesh_d746p")

[node name="CollisionShape3D" type="CollisionShape3D" parent="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("ConvexPolygonShape3D_fnsct")
